from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from buttons import *
from database.userservice import *
from database.adminservice import *
from states import ChangeAdminInfo
from excel_converter import convert_to_excel
import os
from aiogram.types.input_file import FSInputFile


# TODO –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–π–¥–∏ –∞–¥–º–∏–Ω–∞
admin_id = 558618720
admin_router = Router()

@admin_router.message(Command(commands=["admin"]))
async def admin_mm(message: Message):
    # TODO –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    if message.from_user.id == admin_id:
        info = admin_menu_info()
        await message.bot.send_message(message.from_user.id, f"üïµÔ∏è‚Äç<b>Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ</b>: {info[0]}\n"
                                                             f"üí∂<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥</b>: {info[1]}", parse_mode="html",
                                       reply_markup= await admin_menu_in())


@admin_router.callback_query(F.data.in_(["all_payments", "cancel", "none", "change_money", "change_min",
                                         "change_channels", "add_channel", "delete_channel", "mailing",
                                         "imp"]))
async def call_backs(query: CallbackQuery, state: FSMContext):
    await state.clear()
    if query.data == "all_payments":
        active_payments = get_all_wait_payment()
        if active_payments != []:
            for i in active_payments:
                await query.bot.send_message(query.from_user.id, f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É ‚Ññ {i[0]}</b>\n"
                                                                 f"ID: <code>{i[1]}</code>\n"
                                                                 f"–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: {i[2]}\n"
                                                                 f"–ö–∞—Ä—Ç–∞: <code>{i[3]}</code>\n"
                                                                 f"–ë–∞–Ω–∫: {i[4]}", parse_mode="html",
                                             reply_markup=await payments_action_in(i[0]))
        elif active_payments == []:
            await query.bot.send_message(query.from_user.id, "–ù–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É")
    elif query.data == "cancel":
        await query.bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
        await state.clear()
    elif query.data == "none":
        pass
    elif query.data == "change_money":
        await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
                                     reply_markup= await cancel_bt())
        await state.set_state(ChangeAdminInfo.get_amount)
    elif query.data == "change_min":
        await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã–ø–ª–∞—Ç—É",
                                     reply_markup= await cancel_bt())
        await state.set_state(ChangeAdminInfo.get_min)
    elif query.data == "change_channels":
        text = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: \n"
        all_channels = get_channels_for_admin()
        for i in all_channels:
            text += (f"\n–ê–π–¥–∏ <b>–ü–û–î–ü–ò–°–ö–ò</b>: {i[0]}\n"
                     f"Username –∫–∞–Ω–∞–ª–∞: {i[1]}\n"
                     f"ID –∫–∞–Ω–∞–ª–∞: {i[2]}\n")
        await query.bot.send_message(query.from_user.id, text=text,
                                     reply_markup=await admin_channels_in(), parse_mode="html")
    elif query.data == "add_channel":
        await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (—Ñ–æ—Ä–º–∞—Ç: t.me/ –∏–ª–∏ https://t.me/)",
                                     reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.get_channel_url)
    elif query.data == "delete_channel":
        await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID <b>–ü–û–î–ü–ò–°–ö–ò</b> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                                     reply_markup=await cancel_bt(), parse_mode="html")
        await state.set_state(ChangeAdminInfo.delete_channel)
    elif query.data == "mailing":
        await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏/–≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                                     reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.mailing)
    elif query.data == "imp":
        await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                     reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.imp)



@admin_router.callback_query(lambda call: "ban_" in call.data)
async def banning(query: CallbackQuery):
    id_of_user = int(query.data.replace("ban_", ""))
    ban_unban_db(id=id_of_user, bool=True)
    await query.bot.edit_message_reply_markup(chat_id=query.from_user.id, message_id=query.message.message_id,
                                        reply_markup= await imp_menu_in(id_of_user, True))
@admin_router.callback_query(lambda call: "razb_" in call.data)
async def banning(query: CallbackQuery):
    id_of_user = int(query.data.replace("razb_", ""))
    ban_unban_db(id=id_of_user, bool=False)
    await query.bot.edit_message_reply_markup(chat_id=query.from_user.id, message_id=query.message.message_id,
                                        reply_markup= await imp_menu_in(id_of_user, False))

@admin_router.callback_query(lambda call: "changebalance_" in call.data)
async def change_balance(query: CallbackQuery, state: FSMContext):
    id_of_user = int(query.data.replace("changebalance_", ""))
    await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞. –î–ª—è –Ω–µ—Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–µ–π—Ç–µ —Ç–æ—á–∫—É, –∞ –Ω–µ –∑–∞–ø—è—Ç—É—é",
                                 reply_markup= await cancel_bt())
    await state.set_state(ChangeAdminInfo.change_balance)
    await state.set_data({"user_id": id_of_user})
@admin_router.callback_query(lambda call: "addbalance_" in call.data)
async def add_balance(query: CallbackQuery, state: FSMContext):
    id_of_user = int(query.data.replace("addbalance_", ""))
    await query.bot.send_message(query.from_user.id, "–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É? –î–ª—è –Ω–µ—Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–µ–π—Ç–µ —Ç–æ—á–∫—É, –∞ –Ω–µ –∑–∞–ø—è—Ç—É—é.",
                                 reply_markup= await cancel_bt())
    await state.set_state(ChangeAdminInfo.add_balance)
    await state.set_data({"user_id": id_of_user})
@admin_router.callback_query(lambda call: "changerefs_" in call.data)
async def change_refs(query: CallbackQuery, state: FSMContext):
    id_of_user = int(query.data.replace("changerefs_", ""))
    await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
                                 reply_markup= await cancel_bt())
    await state.set_state(ChangeAdminInfo.change_refs)
    await state.set_data({"user_id": id_of_user})
@admin_router.callback_query(lambda call: "showrefs_" in call.data)
async def showrefs(query: CallbackQuery):
    id_of_user = int(query.data.replace("showrefs_", ""))
    try:
        file = convert_to_excel(id_of_user)
        document = FSInputFile(file)
        await query.bot.send_document(query.from_user.id, document)
        os.remove(file)
    except:
        await query.bot.send_message(query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@admin_router.callback_query(lambda call: "accept_" in call.data)
async def acception(query: CallbackQuery):
    id_of_wa = int(query.data.replace("accept_", ""))
    user_info = status_accepted(id_of_wa)
    await query.bot.edit_message_reply_markup(chat_id=query.from_user.id, message_id=query.message.message_id,
                                              reply_markup=await accepted_in())
    await query.bot.send_message(user_info[0], f"–í–∞—à–∞ –∑–∞–≤—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É {user_info[1]} –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")

@admin_router.callback_query(lambda call: "decline_" in call.data)
async def declined(query: CallbackQuery):
    id_of_wa = int(query.data.replace("decline_", ""))
    user_info = status_declined(id_of_wa)
    await query.bot.edit_message_reply_markup(chat_id=query.from_user.id, message_id=query.message.message_id,
                                              reply_markup=await declined_in())
    await query.bot.send_message(user_info[0], f"–í–∞—à–∞ –∑–∞–≤—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É {user_info[1]} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞‚ùå")

@admin_router.message(ChangeAdminInfo.get_amount)
async def get_new_amount(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text:
        try:
            change_price(float(message.text))
            await message.bot.send_message(message.from_user.id, f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {message.text}",
                                           reply_markup=await main_menu_bt())
            await state.clear()
        except:
            await message.bot.send_message(message.from_user.id, "üö´–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å",
                                           reply_markup=await main_menu_bt())
            await state.clear()
@admin_router.message(ChangeAdminInfo.get_min)
async def get_new_min(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text:
        try:
            change_min_amount(float(message.text))
            await message.bot.send_message(message.from_user.id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {message.text}",
                                           reply_markup=await main_menu_bt())
            await state.clear()
        except:
            await message.bot.send_message(message.from_user.id, "üö´–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å",
                                           reply_markup=await main_menu_bt())
            await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
        await state.clear()
@admin_router.message(ChangeAdminInfo.get_channel_url)
async def get_new_channel_url(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif "t.me/" in message.text.lower() or "https://t.me/" in message.text.lower():
        await state.set_data({"chan_url": message.text})
        await message.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞\n"
                                                             "–£–∑–Ω–∞—Ç—å ID –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–≤ –ª—é–±–æ–π "
                                                             "–ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞-—Å–ø–æ–Ω—Å–æ—Ä–∞ –≤ –±–æ—Ç @getmyid_bot. "
                                                             "–ü–æ—Å–ª–µ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≥—Ä–∞—Ñ—ã 'Forwarded from chat:'",
                                       reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.get_channel_id)
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É", reply_markup=await main_menu_bt())
        await state.clear()
@admin_router.message(ChangeAdminInfo.get_channel_id)
async def get_new_channel_id(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text:
        try:
            chanel_url = await state.get_data()
            channel_id = int(message.text)
            if channel_id > 0:
                channel_id *= -1
            new_channel = add_new_channel_db(url=chanel_url["chan_url"], id=channel_id)
            if new_channel:
                await message.bot.send_message(message.from_user.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ\n"
                                                                     f"‚ùóÔ∏è–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∏ –¥–∞—Ç—å –µ–º—É –∞–¥–º–∏–Ω–∫—É(–ø—Ä–∞–≤–∞ –¥–∞–≤–∞—Ç—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)‚ùóÔ∏è",
                                               reply_markup=await main_menu_bt())
                await state.clear()
            else:
                await message.bot.send_message(message.from_user.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                                               reply_markup=await main_menu_bt())
                await state.clear()
        except:
            await message.bot.send_message(message.from_user.id, "üö´–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –î–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                                           reply_markup=await main_menu_bt())
            await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
        await state.clear()
@admin_router.message(ChangeAdminInfo.delete_channel)
async def delete_channel(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text == "1":
        await message.bot.send_message(message.from_user.id, "üö´–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text != "1" and message.text.isdigit():
        try_del = delete_channel_db(int(message.text))
        if try_del:
            await message.bot.send_message(message.from_user.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ",
                                           reply_markup=await main_menu_bt())
            await state.clear()
        else:
            await message.bot.send_message(message.from_user.id, "üö´–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å",
                                           reply_markup=await main_menu_bt())
            await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
        await state.clear()

@admin_router.message(ChangeAdminInfo.mailing)
async def mailing_admin(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    else:
        all_users = get_all_users_tg_id()
        success = 0
        unsuccess = 0
        for i in all_users:
            try:
                await message.bot.copy_message(chat_id=i, from_chat_id=message.from_user.id,
                                               message_id = message.message_id, reply_markup=message.reply_markup)
                success += 1
            except:
                unsuccess +=1
        await message.bot.send_message(message.from_user.id, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                                             f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
                                                             f"–ù–µ—É—Å–ø–µ—à–Ω–æ: {unsuccess}", reply_markup=await main_menu_bt())
        await state.clear()


@admin_router.message(ChangeAdminInfo.imp)
async def get_imp_id(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text.isdigit():
        user_id = int(message.text)
        try:
            status = check_ban(user_id)
            user_info = get_user_info_db(user_id)
            if user_info:
                user_name = "@"
                try:
                    chat = await message.bot.get_chat(user_info[1])
                    user_name += f"{chat.username}"
                except:
                    pass
                await message.bot.send_message(message.from_user.id, f"üìù–ò–º—è —é–∑–µ—Ä–∞: {user_info[0]} {user_name}\n"
                                                                     f"üÜîID —é–∑–µ—Ä–∞: <code>{user_info[1]}</code>\n"
                                                                     f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {user_info[3]}\n"
                                                                     f"üí≥ –ë–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞: {user_info[2]}\n"
                                                                     f"üì§–í—ã–≤–µ–ª {user_info[5]}\n",
                                               parse_mode="html", reply_markup=await imp_menu_in(user_info[1], status))
                await state.clear()
            else:
                await message.bot.send_message(message.from_user.id, f"–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                               reply_markup=await main_menu_bt())
                await state.clear()
        except:
            await message.bot.send_message(message.from_user.id, "üö´–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —é–∑–µ—Ä–∞",
                                           reply_markup=await main_menu_bt())
            await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
        await state.clear()

@admin_router.message(ChangeAdminInfo.add_balance)
async def add_balance_amount(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text:
        try:
            amount = float(message.text)
            user_id = await state.get_data()
            addbalance_db(user_id["user_id"], amount)
            await message.bot.send_message(message.from_user.id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω ‚úÖ",
                                           reply_markup=await main_menu_bt())
            await state.clear()

        except:
            await message.bot.send_message(message.from_user.id, "üö´–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å",
                                           reply_markup=await main_menu_bt())
            await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
        await state.clear()





@admin_router.message(ChangeAdminInfo.change_balance)
async def change_balance_amount(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text:
        try:
            amount = float(message.text)
            user_id = await state.get_data()
            changebalance_db(user_id["user_id"], amount)
            await message.bot.send_message(message.from_user.id, f"–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω ‚úÖ",
                                           reply_markup=await main_menu_bt())
            await state.clear()

        except:
            await message.bot.send_message(message.from_user.id, "üö´–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å",
                                           reply_markup=await main_menu_bt())
            await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
        await state.clear()
@admin_router.message(ChangeAdminInfo.change_refs)
async def change_refs_amount(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text:
        try:
            amount = float(message.text)
            user_id = await state.get_data()
            changerefs_db(user_id["user_id"], amount)
            await message.bot.send_message(message.from_user.id, f"–†–µ—Ñ–µ—Ä–∞–ª—ã –∏–∑–º–µ–Ω–µ–Ω—ã ‚úÖ",
                                           reply_markup=await main_menu_bt())
            await state.clear()

        except:
            await message.bot.send_message(message.from_user.id, "üö´–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å",
                                           reply_markup=await main_menu_bt())
            await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
        await state.clear()
@admin_router.message(F.text=="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å")
async def profile(message: Message, state: FSMContext):
    await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=await main_menu_bt())
    await state.clear()
