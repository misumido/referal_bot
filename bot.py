from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.utils.deep_linking import create_start_link, decode_payload
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, BotCommand, CallbackQuery
from buttons import *
from database.otherservice import *
from database.userservice import *
from states import PaymentState
# TODO –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–π–¥–∏ –∞–¥–º–∏–Ω–∞
admin_id = 558618720
bot_router = Router()

async def check_channels(message):
    all_channels = get_channels_for_check()
    if all_channels != []:
        for i in all_channels:
            try:
                check = await message.bot.get_chat_member(i[0], user_id=message.from_user.id)
                if check.status in ["left"]:
                    await message.bot.send_message(chat_id=message.from_user.id,
                                                   text="–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤",
                                                   reply_markup=await channels_in(all_channels))
                    return False

            except:
                pass
    check_and_add(tg_id=message.from_user.id)
    return True
async def banned(message):
    check = check_ban(message.from_user.id)
    if check:
        await message.bot.send_message(chat_id=message.from_user.id,
                                       text="–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
        return False
    return True



@bot_router.message(CommandStart())
async def start(message: Message, command: BotCommand = None):
    channels_checker = await check_channels(message)
    checker = check_user(message.from_user.id)
    checker_banned = await banned(message)
    if command.args and not checker and checker_banned:
        inv_id = int(decode_payload(command.args))
        inv_name = get_user_name(inv_id)
        if inv_name:
            add_user(user_name=message.from_user.first_name, tg_id=message.from_user.id,
                     invited=inv_name, invited_id=inv_id)
            add_ref(tg_id=message.from_user.id, inv_id=inv_id)
            await message.bot.send_message(message.from_user.id, f"üéâ–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}",
                                           reply_markup=await main_menu_bt())
        elif not inv_name:
            add_user(user_name=message.from_user.first_name, tg_id=message.from_user.id)
            await message.bot.send_message(message.from_user.id, f"üéâ–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}",
                                           reply_markup=await main_menu_bt())
    elif not checker and checker_banned:
        add_user(user_name=message.from_user.first_name, tg_id=message.from_user.id)
        await message.bot.send_message(message.from_user.id, f"üéâ–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}",
                                       reply_markup= await main_menu_bt())
    elif channels_checker and checker_banned and checker:
        await message.bot.send_message(message.from_user.id, f"üéâ–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}",
                                       reply_markup= await main_menu_bt())



@bot_router.message(F.text=="üí∏–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
async def gain(message: Message):
    channels_checker = await check_channels(message)
    checker_banned = await banned(message)
    if channels_checker and checker_banned:
        link = await create_start_link(message.bot, str(message.from_user.id), encode=True)
        price = get_actual_price()
        await message.bot.send_message(message.from_user.id,f"üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π, –∑–∞ \n–∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å {price}‚ÇΩ\n\n"
                             f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n {link}")
@bot_router.message(F.text=="üì±–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    channels_checker = await check_channels(message)
    checker_banned = await banned(message)
    if channels_checker and checker_banned:
        info = get_user_info_db(message.from_user.id)
        if info:
            await message.bot.send_message(message.from_user.id, f"üìù –í–∞—à–µ –∏–º—è: {info[0]}\n"
                                                                 f"üÜî –í–∞—à ID: <code>{info[1]}</code>\n"
                                                                 f"==========================\n"
                                                                 f"üí≥ –ë–∞–ª–∞–Ω—Å: {info[2]}\n"
                                                                 f"üë• –í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: {info[3]}\n"
                                                                 f"üë§ –í–∞—Å –ø—Ä–∏–≤–µ–ª {info[4]}\n"
                                                                 f"==========================\n",
                                           parse_mode="html", reply_markup= await payment_in())

@bot_router.message(F.text=="‚ÑπÔ∏è–ò–Ω—Ñ–æ")
async def info(message: Message):
    channels_checker = await check_channels(message)
    checker_banned = await banned(message)
    if channels_checker and checker_banned:
        all_info = count_info()
        # TODO –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —é–∑–µ—Ä–Ω–µ–π–º –∞–¥–º–∏–Ω–∞
        admin_user = get_admin_user()
        await message.bot.send_message(message.from_user.id,
                                       f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_info[0]}\n"
                                       f"üì§ –í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: {all_info[1]}",
                                       reply_markup=await admin_in(admin_user))


@bot_router.callback_query(F.data.in_(["payment", "check_chan"]))
async def call_backs(query: CallbackQuery, state: FSMContext):
    await state.clear()
    if query.data == "payment":
        balance = get_user_info_db(query.from_user.id)[2]
        min_amount = get_actual_min_amount()
        check_wa = check_for_wa(query.from_user.id)
        if balance < min_amount:
            await query.message.bot.answer_callback_query(query.id, text=f"üö´–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {min_amount}",
                                                          show_alert=True)
        elif check_wa:
            await query.message.bot.answer_callback_query(query.id, text="‚è≥–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É. –û–∂–∏–¥–∞–π—Ç–µ",
                                                          show_alert=True)
        elif balance >= min_amount:
            await query.bot.send_message(query.from_user.id, "üí≥–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã", reply_markup= await cancel_bt())
            await state.set_state(PaymentState.get_card)
    elif query.data == "check_chan":
        checking = await check_channels(query)
        await query.bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
        if checking:
            await query.bot.send_message(query.from_user.id, f"üéâ–ü—Ä–∏–≤–µ—Ç, {query.from_user.first_name}",
                                         reply_markup= await main_menu_bt())

@bot_router.message(PaymentState.get_card)
async def get_card(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text:
        card = message.text
        await message.bot.send_message(message.from_user.id, "üè¶–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞")
        await state.set_data({"card": card})
        await state.set_state(PaymentState.get_bank)
    else:
        await message.bot.send_message(message.from_user.id, "‚ùóÔ∏è–û—à–∏–±–∫–∞", reply_markup= await main_menu_bt())
        await state.clear()

@bot_router.message(PaymentState.get_bank)
async def get_bank(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text:
        bank = message.text
        card = await state.get_data()
        balance = get_user_info_db(message.from_user.id)[2]
        await message.bot.send_message(message.from_user.id, "‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç",
                                       reply_markup= await main_menu_bt())
        i = reg_withdrawals(tg_id=message.from_user.id, amount=balance, card=card.get('card'), bank=bank)
        await message.bot.send_message(admin_id, f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É ‚Ññ {i[0]}</b>\n"
                                                 f"ID: <code>{i[1]}</code>\n"
                                                 f"–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: {i[2]}\n"
                                                 f"–ö–∞—Ä—Ç–∞: <code>{i[3]}</code>\n"
                                                 f"–ë–∞–Ω–∫: {i[4]}", parse_mode="html",
                                       reply_markup=await payments_action_in(i[0]))
        await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup= await main_menu_bt())
        await state.clear()







